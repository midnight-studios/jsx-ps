#target photoshop#include mb_Utils._jsx/**   * @ copyright (c) 2004-2015 by Jacques Joubert - {@link http://midnightstudios.co.za/}*******/var countOpenDocuments = Number(app.documents.length);var appAuthor = "Midnight Studios";var appName = "Photographer's Album Creator";var appVer = "Alpha Version 0.0.1";var dateObj = new Date();var monthDays = new Array("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31");var monthNames = new Array("January","February","March","April","May","June","July","August","September","October","November","December");var year = new Array("2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021","2022","2023","2024","2025","2026","2027","2028","2029","2030","2031","2032","2033","2034","2035","2036","2037","2038","2039","2040","2041","2042","2043","2044","2045","2046","2047","2048","2049","2050");var albumTypesMetrics = new Array("Rectangular B6 (12.7cm x 17.9cm)","Rectangular B4 (25.2cm x 35.5cm)","Rectangular A5 (15.2cm x 21.5cm)","Rectangular A4 (20.3cm x 28.7cm)","Rectangular A3 (29.7cm x 42.0cm)", "Square 1 (15.2cm x 15.2cm)", "Square 2 (20.3cm x 20.3cm)", "Square 3 (25.4cm x 25.4cm)", "Square 4 (30.5cm x 30.5cm)");var albumTypesImperial = new Array("Rectangular B6 (5in x 7in)","Rectangular B4 (10in x 14in)","Rectangular A5 (6in x 8.5in)","Rectangular A4 (8in x 11.3in)","Rectangular A3 (11.7in x 16.5in)", "Square 1 (6in x 6in)", "Square 2 (8in x 8in)", "Square 3 (10in x 10in)", "Square 4 (12in x 12in)");var w = new Window("dialog", appName, [0,0,460,472], {resizeable: false, });var allowedPages = new Array("Select","20","30","40","50","60","70","80","90","100");var unitMetrics = new Array(1,2,3,4,5,6,7,8,9,10);var unitImperial = new Array(0.03937,0.07874,0.11811,0.15748,0.19685,0.23622,0.275591,0.314961,0.354331,0.393701);var tempWidth;var tempHeight;var setCut;var setBleed;var pCount = Number(0);var progressStop = Number(100);var p = new Window ('palette','Please Wait...', undefined, {closeButton: false}); p.alignChildren = "centre";var bProgress = p.add('statictext {text: "' + pCount + '", characters: 20, justify: "center"}');//var bProgress = p.add ('progressbar', undefined, 0, 100);bProgress.preferredSize = [150, 20];//bProgress.value =pCount;function addProgress(i){    pCount = pCount + i;var j = Number(bProgress.text); if(pCount >= progressStop) {                 p.close();          } else{            bProgress.text = " " + pCount + "% completed...";                                      }//waitForRedraw();}        // According to one example's comment in the // Photoshop Javascript Reference:// "A helper function for debugging// It also helps the user see what is going on"function waitForRedraw(){var eventWait = charIDToTypeID("Wait")var enumRedrawComplete = charIDToTypeID("RdCm")var typeState = charIDToTypeID("Stte")var keyState = charIDToTypeID("Stte")var desc = new ActionDescriptor()desc.putEnumerated(keyState, typeState, enumRedrawComplete)executeAction(eventWait, desc, DialogModes.NO)}with(w){               var panel = w.add( "panel", [5,5,455,120], '', )//{borderStyle:'none'}  with(panel){    var scrollGroup = panel.add ('group', [5,5,445,300]);     var scrollBar = panel.add ('scrollbar', [0,0,20,200]);		//var panelWelcomeText = add( "statictext", [5,10,450,90], '\rThis Script will guide you through the process for creating an Album.\r\rPlease note that the "Cut" dimension starts at the edge of the document and the "Bleed" dimesnion starts where the "Cut" dimesion ends.\r\r Macintosh Compatible\rÿ Windows Compatible\r© Midnight Studios\rThis Script is protected by Intellectual Copyrights.\rAuthor ~ JE Joubert\rwww.midnightstudios.co.za', {multiline: true, scrolling: true, borderStyle:'none'});	};           scrollGroup.add( "statictext", [5,10,435,200], '\rThis Script will guide you through the process for creating an Album.\r\rPlease note that the "Cut" dimension starts at the edge of the document and the "Bleed" dimesnion starts where the "Cut" dimesion ends.\r\r Macintosh Compatible\rÿ Windows Compatible\r© Midnight Studios\rThis Script is protected by Intellectual Copyrights.\rAuthor ~ JE Joubert\rwww.midnightstudios.co.za', {multiline: true});// Move the whole scroll group up or downscrollBar.onChanging = function () { scrollGroup.location.y = -1 * this.value;}w.onShow = function() {// Set various sizes and locations when the window is drawn panel.size.height = w.size.height-20;scrollBar.size.height = panel.size.height-20;scrollBar.size.width = 20;scrollBar.location = [panel.size.width-28, 8];scrollBar.maxvalue = scrollGroup.size.height - panel.size.height + 15;};                                var panelDetails = w.add( "panel", [5,125,455,275], 'Album Details' );	with(panelDetails){		var panelDetailsTextName = add( "edittext", [95,20,295,40], undefined );		var panelDetailsLabelName = add( "statictext", [50,20,120,40], 'Name:' );		var panelDetailsLabelSurname = add( "statictext", [30,45,100,65], 'Surname:' );		var panelDetailsLabelDate = add( "statictext", [55,70,125,90], 'Date:' );		var panelDetailsTextSurname = add( "edittext", [95,45,295,65], undefined );		var panelDetailsDateDay = add( "dropdownlist", [95,70,145,90], undefined );		var panelDetailsDateMonth = add( "dropdownlist", [150,70,295,90], undefined );		var panelDetailsDateYear = add( "dropdownlist", [300,70,390,90], undefined );		var panelDetailsLabelUnits = add( "statictext", [50,100,120,120], 'Units:' );		var panelDetailsRadioButtonUnitMetric = add( "radiobutton", [100,100,170,120], 'Metric' );		var panelDetailsRadioButtonUnitImperial = add( "radiobutton", [170,100,255,120], 'Imperial' );	}var panelProperties = w.add( "panel", [5,280,455,420], 'Album Properties' );	with(panelProperties){		var panelPropertiesLabelType = add( "statictext", [55,20,125,40], 'Type:' );		var panelPropertiesLabelCutOffArea = add( "statictext", [30,45,90,65], 'Cut Area:' );		var panelPropertiesLabelBleedArea = add( "statictext", [20,70,90,90], 'Bleed Area:' );		var panelPropertiesCutOffLimits = add( "dropdownlist", [95,45,195,65], undefined );		var panelPropertiesBleedLimits = add( "dropdownlist", [95,70,195,90], undefined );		var panelPropertiesAlbumType = add( "dropdownlist", [95,20,365,40], undefined );		var panelPropertiesLabelPages = add( "statictext", [50,95,120,115], 'Pages:' );		var panelPropertiesSelectPages = add( "dropdownlist", [95,95,195,115], undefined );	};};panelDetailsRadioButtonUnitMetric.value = truevar butContinue = w.add( "button", [380,445,450,467], 'Continue' );var butCancel = w.add( "button", [305,445,375,467], 'Cancel' );butContinue.onClick = taskContinue;butCancel.onClick = taskExit;butContinue.enabled = false;with(panelDetailsDateDay) { 	for (var i = 0; i < monthDays.length; i++)	{		panelDetailsDateDay.add ("item", monthDays[i]);  	};	for (var i = 0; i < monthDays.length; i++)	{		if (monthDays[i]  == dateObj.getUTCDate()) { panelDetailsDateDay.selection = i;}	}}with(panelDetailsDateMonth) { 	for (var i = 0; i < monthNames.length; i++)	{	panelDetailsDateMonth.add ("item", monthNames[i]);  	};panelDetailsDateMonth.selection = dateObj.getUTCMonth();}with(panelDetailsDateYear) {	for (var i = 0; i < year.length; i++)	{		panelDetailsDateYear.add ("item", year[i]);  	};	for (var i = 0; i < year.length; i++)	{		if (year[i]  == dateObj.getUTCFullYear()) {panelDetailsDateYear.selection = i;}	};};with(panelPropertiesSelectPages) {	for (var i = 0; i < allowedPages.length; i++)	{		panelPropertiesSelectPages.add ("item", allowedPages[i]);  	};};panelPropertiesSelectPages.selection = 0;var isMetric = panelDetailsRadioButtonUnitMetric.value;panelPropertiesAlbumType.add ("item", "Please Select Your Album Type");panelPropertiesBleedLimits.add ("item", "Select");panelPropertiesCutOffLimits.add ("item", "Select");initAlbumType();panelDetailsRadioButtonUnitMetric.onClick = clickMetric;panelDetailsRadioButtonUnitImperial.onClick = clickImperial;panelPropertiesCutOffLimits.onChange = validateContinue;panelPropertiesBleedLimits.onChange = validateContinue;panelPropertiesAlbumType.onChange = validateContinue;panelPropertiesSelectPages.onChange = validateContinue;if(countOpenDocuments > 0) { alert("This Script my require extensive resources to complete this operation, for this reason we ask to please save and close all current documents open in Photoshop and try again.");}else { w.center();w.show();};	/*	*	*	*/	function initAlbumType() { 		if(isMetric){			for (var i = 0; i < albumTypesMetrics.length; i++)			{				panelPropertiesAlbumType.add ("item", albumTypesMetrics[i]);                  };			for (var i = 0; i < unitMetrics.length; i++)			{				panelPropertiesCutOffLimits.add ("item", unitMetrics[i] + "mm");                  };			for (var i = 0; i < unitMetrics.length; i++)			{				panelPropertiesBleedLimits.add ("item", unitMetrics[i] + "mm");                  };		}    else {			for (var i = 0; i < albumTypesImperial.length; i++)			{				panelPropertiesAlbumType.add ("item", albumTypesImperial[i]);                  };			for (var i = 0; i < unitImperial.length; i++)			{				panelPropertiesCutOffLimits.add ("item", unitImperial[i] + "in");                  };			for (var i = 0; i < unitImperial.length; i++)			{				panelPropertiesBleedLimits.add ("item", unitImperial[i] + "in");                  };                        };        panelPropertiesAlbumType.selection = 0;        panelPropertiesBleedLimits.selection = 0;        panelPropertiesCutOffLimits.selection = 0;                              	};	/*	*	*	*/	function taskExit(){		alert("Cancel");		w.close();	};function validateContinue(){var gotValue = '';    gotValue = panelPropertiesAlbumType.selection.text;    var str = String(gotValue);//";    var k = Number(str.indexOf("Please Select Your Album Type"));    butContinue.enabled = true;     if(k >= 0){        butContinue.enabled = false;       }       gotValue = '';   gotValue = panelPropertiesBleedLimits.selection.text;   str = String(gotValue);//";   k = Number(str.indexOf("Select"));     if(k >= 0){        butContinue.enabled = false;       }       gotValue = '';     gotValue = panelPropertiesCutOffLimits.selection.text;   str = String(gotValue);//";   k = Number(str.indexOf("Select"));     if(k >= 0){        butContinue.enabled = false;       }      gotValue = '';     gotValue = panelPropertiesSelectPages.selection.text;   str = String(gotValue);//";   k = Number(str.indexOf("Select"));     if(k >= 0){        butContinue.enabled = false;       }    }/****/	function taskContinue(){             w.close();      createNewDocument();        };/****/function clickImperial() {    isMetric = false; clearList();initAlbumType();}	/*	*	*	*/function clickMetric() {   isMetric = true; clearList();initAlbumType();}	/*	*	*	*/function clearList() {        var i = panelPropertiesAlbumType.items.length;          do {    panelPropertiesAlbumType.remove (panelPropertiesAlbumType.items[i]);     i--;    }while(i > 0);i = panelPropertiesBleedLimits.items.length;          do {    panelPropertiesBleedLimits.remove (panelPropertiesBleedLimits.items[i]);     i--;    }while(i > 0);i = panelPropertiesCutOffLimits.items.length;    do {    panelPropertiesCutOffLimits.remove (panelPropertiesCutOffLimits.items[i]);     i--;    }while(i > 0);               }function createShape(){        var valBleed = panelPropertiesBleedLimits.selection.text;    var valCut = panelPropertiesCutOffLimits.selection.text;        if(isMetric){ var valUnit = "MM";}     else{var valUnit = "INCHES";}            var doc = app.activeDocument;    var y = arguments.length;    var i = 0;            // Save the current preferences    var startRulerUnits = app.preferences.rulerUnits    var startTypeUnits = app.preferences.typeUnits    var startDisplayDialogs = app.displayDialogs        // Set Adobe Photoshop CS6 to use pixels and display no dialogs    app.preferences.rulerUnits = Units.valUnit    app.preferences.typeUnits = TypeUnits.PIXELS    app.displayDialogs = DialogModes.NO        }function createNewDocument(){        var createAlbumType = panelPropertiesAlbumType.selection.text;        switch(isMetric){    case true:                            switch(createAlbumType)                    {                        case albumTypesMetrics[0]: //"Rectangular B6 (12.7cm x 17.9cm)"                        tempWidth = 17.9;                        tempHeight = 12.7;                        break;                                                case albumTypesMetrics[1]: //"Rectangular B4 (25.2cm x 35.5cm)"                        tempWidth = 35.5;                        tempHeight = 25.2;                        break;                                                case albumTypesMetrics[2]: //"Rectangular A5 (15.2cm x 21.5cm)"                        tempWidth = 21.5;                        tempHeight = 15.2;                        break;                                                case albumTypesMetrics[3]: //"Rectangular A4 (20.3cm x 28.7cm)"                        tempWidth = 20.3;                        tempHeight = 28.7;                        break;                                                                        case albumTypesMetrics[4]: //"Rectangular A3 (29.7cm x 42.0cm)"                        tempWidth = 42.0;                        tempHeight = 29.7;                        break;                                                                        case albumTypesMetrics[5]: //"Square 1 (15.2cm x 15.2cm)"                        tempWidth = 15.2;                        tempHeight = 15.2;                        break;                                                                        case albumTypesMetrics[6]: //"Square 2 (20.3cm x 20.3cm)"                        tempWidth = 20.3;                        tempHeight = 20.3;                        break;                                                                        case albumTypesMetrics[7]: //"Square 3 (25.4cm x 25.4cm)"                        tempWidth = 25.4;                        tempHeight = 25.4;                        break;                                                case albumTypesMetrics[8]: //"Square 4 (30.5cm x 30.5cm)"                        tempWidth = 30.5;                        tempHeight = 30.5;                        break;                        default:    ;                    }    break;        default:            switch(createAlbumType)            {                        case albumTypesImperial[0]: //"Rectangular B6 (5in x 7in)"                        tempWidth = 7;                        tempHeight = 5;                        break;                                                case albumTypesImperial[1]: //"Rectangular B4 (10in x 14in)"                        tempWidth = 14;                        tempHeight = 10;                        break;                                                case albumTypesImperial[2]: //"Rectangular A5 (6in in x 8.5in)"                        tempWidth = 8.5;                        tempHeight = 6;                        break;                                                case albumTypesImperial[3]: //"Rectangular A4 (8in x 11.3in)"                        tempWidth = 11.3;                        tempHeight = 8;                        break;                                                                        case albumTypesImperial[4]: //"Rectangular A3 (11.7in x 16.5in)"                        tempWidth = 16.5;                        tempHeight = 11.7;                        break;                                                                        case albumTypesImperial[5]: //"Square 1 (6in x 6in)"                        tempWidth = 6;                        tempHeight = 6;                        break;                                                                        case albumTypesImperial[6]: //"Square 2 (8in x 8in)"                        tempWidth = 8;                        tempHeight = 8;                        break;                                                                        case albumTypesImperial[7]: //"Square 3 (10in x 10in)"                        tempWidth = 10;                        tempHeight = 10;                        break;                                                case albumTypesImperial[8]: //"Square 4 (12in x 12in)"                        tempWidth = 12;                        tempHeight = 12;                        break;                                default:;            }    }            var tempResolution = 300;var tempName = panelDetailsTextName.text + " " + panelDetailsTextSurname.text + " " + panelPropertiesSelectPages.selection.text + " page - " + panelPropertiesAlbumType.selection.text + " Album.";        if(confirm("You are about to create the Album: "+ tempName + "\rAre you sure?"," ","Create Album")) {        		               p.show();        /*     */   var b = Number(panelPropertiesBleedLimits.selection)-1;var c = Number(panelPropertiesCutOffLimits.selection)-1;var mCut = (unitMetrics[c]/10)*2;var pCut = unitImperial[c]*2;var mBleed = (unitMetrics[b]/10)*2;var pBleed = unitImperial[b]*2;/* */if(isMetric){        var bleedsizeHeight = tempHeight-(mCut+mBleed);        var bleedsizeWidth = tempWidth-(mCut+mBleed);        var cutsizeHeight = tempHeight-mCut;        var cutsizeWidth = tempWidth-mCut;         var scaleUnit = "cm";    }else{        var bleedsizeHeight = tempHeight-(pCut+pBleed);        var bleedsizeWidth = tempWidth-(pCut+pBleed);        var cutsizeHeight = tempHeight-pCut;        var cutsizeWidth = tempWidth-pCut;           var scaleUnit = "in";    };       var nameSafeArea = "Safe Area";var nameBleedArea  = "Bleed Area";var nameCutArea = "Cut Area"var nameTopLeft = "Top Left";var nameTopRight = "Top Right";var nameBottomLeft = "Bottom Left";var nameBottomRight = "Bottom Right";       // alert("Bleed Height: " + bleedsizeHeight + " Bleed Width: " + bleedsizeWidth + "\r Doc Height: " + tempHeight + " Doc Width: " + tempWidth)  /**/var thisAlbum = createNewDocument(tempHeight + scaleUnit,tempWidth + scaleUnit,tempResolution,tempName, NewDocumentMode.RGB,DocumentFill.WHITE);var thisBleed = createNewDocument(cutsizeHeight + scaleUnit,cutsizeWidth + scaleUnit,tempResolution,nameBleedArea, NewDocumentMode.RGB,DocumentFill.TRANSPARENT);var thisSafe = createNewDocument(bleedsizeHeight + scaleUnit,bleedsizeWidth + scaleUnit,tempResolution,nameSafeArea, NewDocumentMode.RGB,DocumentFill.TRANSPARENT);var thisTL = createNewDocument((tempHeight / 2)  + scaleUnit,(tempWidth / 2) + scaleUnit,tempResolution,nameTopLeft, NewDocumentMode.RGB,DocumentFill.TRANSPARENT);var thisBL= createNewDocument((tempHeight / 2) + scaleUnit,(tempWidth / 2) + scaleUnit,tempResolution,nameBottomLeft, NewDocumentMode.RGB,DocumentFill.TRANSPARENT);var thisTR = createNewDocument((tempHeight / 2)  + scaleUnit,(tempWidth / 2) + scaleUnit,tempResolution,nameTopRight, NewDocumentMode.RGB,DocumentFill.TRANSPARENT);var thisBR = createNewDocument((tempHeight / 2) + scaleUnit,(tempWidth / 2) + scaleUnit,tempResolution,nameBottomRight, NewDocumentMode.RGB,DocumentFill.TRANSPARENT);function createNewDocument(height,width,resolution, name, mode, fill){addProgress(1);       return app.documents.add(height,width,resolution,name, mode,fill);        }    //alert(activeDocument.name);          //Black 000000        //White ffffff         // Grey d3d3d3         //Red ff0000        //Orange ffc001        //Yellow fff601        //Green aeff01        //Light Blue 01f6ff        //Dark Blue 011fff        //Purple 7e01ff        //Pink ff01fc        //Rose ff0149        createArtLayer(thisAlbum,'ff0000');createArtLayer(thisBleed,'01f6ff');createArtLayer(thisSafe,'aeff01');createArtLayer(thisTL,'d3d3d3');createArtLayer(thisBL,'d3d3d3');createArtLayer(thisTR,'d3d3d3');createArtLayer(thisBR,'d3d3d3');duplicateAllandMove(thisAlbum.name);closeTemp(thisAlbum.name);selectVectorMask(thisAlbum.name);centreAllLayers(thisAlbum.name);moveToSelection(nameTopLeft,'top');moveToSelection(nameTopRight,'top');moveToSelection(nameTopLeft,'left');moveToSelection(nameBottomLeft,'left');moveToSelection(nameTopRight,'right');moveToSelection(nameBottomRight,'right');moveToSelection(nameBottomRight,'bottom');moveToSelection(nameBottomLeft,'bottom');addProgress(1);app.activeDocument.selection.deselect();addProgress(1);var thisMainLayer = app.activeDocument.artLayers.getByName(thisAlbum.name);thisMainLayer.name = nameCutArea;/*app.activeDocument.artLayers.getByName(nameTopLeft)app.activeDocument.artLayers.getByName(nameTopRight)app.activeDocument.artLayers.getByName(nameBottomLeft)app.activeDocument.artLayers.getByName(nameBottomRight)*/var mainPageName = "Page";var qLayerSet = app.activeDocument.layerSets.add();qLayerSet.name = mainPageName + " Quadrants";moveLayersToGroup(nameTopLeft, qLayerSet.name);moveLayersToGroup(nameTopRight, qLayerSet.name);moveLayersToGroup(nameBottomLeft, qLayerSet.name);moveLayersToGroup(nameBottomRight, qLayerSet.name);selectBottomLayer();addProgress(1);var wLayerSet = app.activeDocument.layerSets.add();wLayerSet.name = mainPageName + " Work Zones";moveLayersToGroup(nameCutArea, wLayerSet.name);moveLayersToGroup(nameBleedArea, wLayerSet.name);moveLayersToGroup(nameSafeArea, wLayerSet.name);var mLayerSet = app.activeDocument.layerSets.add()mLayerSet.name = mainPageName;var leftPageName = "Left " + mainPageName;var rightPageName = "Right " + mainPageName;moveLayerSetToLayerSet(wLayerSet, mLayerSet);moveLayerSetToLayerSet(qLayerSet, mLayerSet);duplicateActiveObject(mLayerSet,leftPageName);duplicateActiveObject(mLayerSet,rightPageName);var tempSet = app.activeDocument.layerSets.getByName(rightPageName);app.activeDocument.activeLayer = tempSet;sideByside();app.activeDocument.suspendHistory("bcmToogleOpenCloseSet", "toogleOpenCloseSet()");var tempSet = app.activeDocument.layerSets.getByName(leftPageName);app.activeDocument.activeLayer = tempSet;app.activeDocument.suspendHistory("bcmToogleOpenCloseSet", "toogleOpenCloseSet()");app.activeDocument.activeLayer = mLayerSet;app.activeDocument.suspendHistory("bcmToogleOpenCloseSet", "toogleOpenCloseSet()");selectBottomLayer();var tempSet = app.activeDocument.layerSets.getByName(mainPageName);tempSet.remove();tempSet = null;/*    */var frameReferenceName = "Album Frame Reference";var tLayerSet = app.activeDocument.layerSets.add();tLayerSet.name = frameReferenceName;var targetSet = app.activeDocument.layerSets.getByName(frameReferenceName);var tempSet = app.activeDocument.layerSets.getByName(leftPageName);moveLayerSetToLayerSet(tempSet, targetSet);var tempSet = app.activeDocument.layerSets.getByName(rightPageName);moveLayerSetToLayerSet(tempSet, targetSet);app.activeDocument.activeLayer = targetSet;app.activeDocument.suspendHistory("bcmToogleOpenCloseSet", "toogleOpenCloseSet()");revealAll();function sideByside(){var layer = app.activeDocument.artLayers.getByName('Background');var bounds = layer.bounds;var moveThis = app.activeDocument.activeLayervar docWidth = app.activeDocument.widthvar docHeight = app.activeDocument.heightvar dX = docWidth + (Number(bounds[0]) - (Number(bounds[0])*2));var dY = Number(bounds[1]);moveThis.translate(dX, dY);          }function revealAll(){    // =======================================================var idRvlA = charIDToTypeID( "RvlA" );    var desc = new ActionDescriptor();        try{    executeAction( idRvlA, desc, DialogModes.NO );    }catch(e){}        }function  duplicateActiveObject(target,newname){             if (target.typename == "LayerSet" ) {             var duplicateThis = app.activeDocument.layerSets.getByName(target.name);     }     if (target.typename == "ArtLayer") {             var duplicateThis = app.activeDocument.artLayer.getByName(target.name);     }    app.activeDocument.activeLayer = duplicateThis;    // =======================================================    var idDplc = charIDToTypeID( "Dplc" );        var desc = new ActionDescriptor();        var idnull = charIDToTypeID( "null" );            var ref = new ActionReference();            var idLyr = charIDToTypeID( "Lyr " );            var idOrdn = charIDToTypeID( "Ordn" );            var idTrgt = charIDToTypeID( "Trgt" );            ref.putEnumerated( idLyr, idOrdn, idTrgt );        desc.putReference( idnull, ref );            if(newname !=undefined){            var idNm = charIDToTypeID( "Nm  " );            desc.putString( idNm, "" + newname + "" );            }        var idVrsn = charIDToTypeID( "Vrsn" );        desc.putInteger( idVrsn, 5 );        try{    executeAction( idDplc, desc, DialogModes.NO );    }    catch(e){}}selectBottomLayer();addProgress(1);function moveLayerSetToLayerSet(src, dst) {          if (src.typename == "LayerSet") {              // Fake layer method              var fakeLayer = app.activeDocument.artLayers.add()             fakeLayer.move(dst, ElementPlacement.INSIDE);              src.move(fakeLayer, ElementPlacement.PLACEBEFORE);              fakeLayer.remove();          } else {              src.move(dst, ElementPlacement.INSIDE);          }      };function moveLayersToGroup(layer,group){var moveLayer = app.activeDocument.artLayers.getByName(layer)var toGroup = app.activeDocument.layerSets.getByName(group)  moveLayer.move(toGroup, ElementPlacement.INSIDE);  }selectBottomLayer();//selectBottomLayer();//selectTopLayer();function selectBottomLayer(){var docRef = app.activeDocument;var activeLayerName = docRef.activeLayer.name;var setLayerName = ""; docRef.activeLayer = docRef.layers[docRef.layers.length - 1]; docRef = null;}function selectTopLayer(){var docRef = app.activeDocument;var activeLayerName = docRef.activeLayer.name;var setLayerName = "";  docRef.activeLayer = docRef.layers[0];docRef = null;}   // Promote Background Layer - Adobe Photoshop Script// Description: an event-based script that unlocks the Background layer and turns it into a real layer// Requirements: Adobe Photoshop CS3, or higher// Version: 1.0.0, 22/Feb/2014// Author: Trevor Morris (trevor@morris-photographics.com)// Website: http://morris-photographics.com/// =======================================================/** "$$$/JavaScripts/PromoteBackgroundLayer/Description=Unlock the Background layer and turn it into a real layer." **/// =======================================================// Installation:// 1. Place script in "C:\Program Files\Adobe\Adobe Photoshop CS#\Presets\Scripts\Event Scripts Only"// 2. Choose File > Scripts > Promote Background Layer// 3. Select an event (e.g., Open Document ["Opn "], New Document ["Mk  "]) from the Photoshop Event drop-down// 4. Select "Promote Background Layer.jsx" from the Script drop-down// 5. Press the Add button// 6. Press the Done button// =======================================================///////////////////////////////////////////////////////////////////////////////// promoteBackgroundLayer - unlock/rename Background layer///////////////////////////////////////////////////////////////////////////////function promoteBackgroundLayer() {	// declare local variables	var doc = activeDocument;	var layers = doc.layers;	var layer = layers[layers.length - 1];	// rename Background layer	if (layer.isBackgroundLayer) {		layer.name = 'Background';	}}// run main functionif (documents.length) {	//promoteBackgroundLayer();}//alert(bProgress.text);/**/function duplicateDocument(targetDocument, sourceDocument,layerName){        var targetDoc = app.documents.getByName(targetDocument);    var sourceDoc = app.documents.getByName(sourceDocument);        app.activeDocument = sourceDoc;    var doDoc = sourceDoc.artLayers.getByName(layerName);    doDoc.duplicate(targetDoc, ElementPlacement.PLACEATBEGINNING);}function duplicateAllandMove(targetItem){var j = app.documents.length;    for(var i=0;i <j; i++){        if(app.documents[i].name != targetItem) {                duplicateDocument(targetItem, app.documents[i].name, app.documents[i].name);                 addProgress(1);                }    } }function closeTemp(targetItem){    var j = app.documents.length;    for(var i=j;0 <= i; i--){        try {             var closeDoc = app.documents[i].name;            if(closeDoc!= targetItem) {                 app.documents[i].close(SaveOptions.DONOTSAVECHANGES);                                addProgress(1);                                 }            }         catch (e) {            }        }    }  //make a new document function createArtLayer(focusDocument,thisColorValue) {    addProgress(1);           app.activeDocument = focusDocument;    var doc = app.activeDocument;    var newLayerName = doc.name;    createSolidColor(newLayerName);    var fillThis = doc.artLayers.getByName(newLayerName)    doc.activeLayer = fillThis    var colorValue = thisColorValue;    setColor(colorValue,newLayerName);    selectPath() ;    makePath();    convertPath();     } function createSolidColor(newLayerName){      addProgress(1);           var idMk = charIDToTypeID( "Mk  " );    var desc = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );        var ref = new ActionReference();        var idcontentLayer = stringIDToTypeID( "contentLayer" );        ref.putClass( idcontentLayer );    desc.putReference( idnull, ref );    var idUsng = charIDToTypeID( "Usng" );        var desc102 = new ActionDescriptor();        if (newLayerName){        var idNm = charIDToTypeID( "Nm  " );        desc102.putString( idNm, "" + newLayerName + "" );        }        var idType = charIDToTypeID( "Type" );            var desc103 = new ActionDescriptor();            var idClr = charIDToTypeID( "Clr " );                var desc104 = new ActionDescriptor();                var idRd = charIDToTypeID( "Rd  " );                desc104.putDouble( idRd, 219.182879 );                var idGrn = charIDToTypeID( "Grn " );                desc104.putDouble( idGrn, 226.000002 );                var idBl = charIDToTypeID( "Bl  " );                desc104.putDouble( idBl, 32.793775 );            var idRGBC = charIDToTypeID( "RGBC" );            desc103.putObject( idClr, idRGBC, desc104 );        var idsolidColorLayer = stringIDToTypeID( "solidColorLayer" );        desc102.putObject( idType, idsolidColorLayer, desc103 );    var idcontentLayer = stringIDToTypeID( "contentLayer" );    desc.putObject( idUsng, idcontentLayer, desc102 );executeAction( idMk, desc, DialogModes.NO );}function setColor(colorValue,newLayerName) {        addProgress(1);         var sColor =  new SolidColor;      sColor.rgb.hexValue = colorValue;      app.activeDocument.activeLayer = app.activeDocument.layers.getByName(newLayerName);      setColorOfFillLayer( sColor );  }function setColorOfFillLayer( sColor ) {          addProgress(1);         var desc = new ActionDescriptor();          var ref = new ActionReference();          ref.putEnumerated( stringIDToTypeID('contentLayer'), charIDToTypeID('Ordn'), charIDToTypeID('Trgt') );      desc.putReference( charIDToTypeID('null'), ref );          var fillDesc = new ActionDescriptor();              var colorDesc = new ActionDescriptor();              colorDesc.putDouble( charIDToTypeID('Rd  '), sColor.rgb.red );              colorDesc.putDouble( charIDToTypeID('Grn '), sColor.rgb.green );              colorDesc.putDouble( charIDToTypeID('Bl  '), sColor.rgb.blue );          fillDesc.putObject( charIDToTypeID('Clr '), charIDToTypeID('RGBC'), colorDesc );      desc.putObject( charIDToTypeID('T   '), stringIDToTypeID('solidColorLayer'), fillDesc );      executeAction( charIDToTypeID('setd'), desc, DialogModes.NO );  }function selectPath() {        addProgress(1);     // =======================================================var idsetd = charIDToTypeID( "setd" );    var desc81 = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );        var ref26 = new ActionReference();        var idChnl = charIDToTypeID( "Chnl" );        var idfsel = charIDToTypeID( "fsel" );        ref26.putProperty( idChnl, idfsel );    desc81.putReference( idnull, ref26 );    var idT = charIDToTypeID( "T   " );        var ref27 = new ActionReference();        var idChnl = charIDToTypeID( "Chnl" );        var idChnl = charIDToTypeID( "Chnl" );        var idTrsp = charIDToTypeID( "Trsp" );        ref27.putEnumerated( idChnl, idChnl, idTrsp );    desc81.putReference( idT, ref27 );executeAction( idsetd, desc81, DialogModes.NO );}function makePath() {        addProgress(1);     // =======================================================var idMk = charIDToTypeID( "Mk  " );    var desc82 = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );        var ref28 = new ActionReference();        var idPath = charIDToTypeID( "Path" );        ref28.putClass( idPath );    desc82.putReference( idnull, ref28 );    var idFrom = charIDToTypeID( "From" );        var ref29 = new ActionReference();        var idcsel = charIDToTypeID( "csel" );        var idfsel = charIDToTypeID( "fsel" );        ref29.putProperty( idcsel, idfsel );    desc82.putReference( idFrom, ref29 );    var idTlrn = charIDToTypeID( "Tlrn" );    var idPxl = charIDToTypeID( "#Pxl" );    desc82.putUnitDouble( idTlrn, idPxl, 2.000000 );executeAction( idMk, desc82, DialogModes.NO );}function convertPath() {        addProgress(1); // =======================================================var idMk = charIDToTypeID( "Mk  " );    var desc83 = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );        var ref30 = new ActionReference();        var idPath = charIDToTypeID( "Path" );        ref30.putClass( idPath );    desc83.putReference( idnull, ref30 );    var idAt = charIDToTypeID( "At  " );        var ref31 = new ActionReference();        var idPath = charIDToTypeID( "Path" );        var idPath = charIDToTypeID( "Path" );        var idvectorMask = stringIDToTypeID( "vectorMask" );        ref31.putEnumerated( idPath, idPath, idvectorMask );    desc83.putReference( idAt, ref31 );    var idUsng = charIDToTypeID( "Usng" );        var ref32 = new ActionReference();        var idPath = charIDToTypeID( "Path" );        var idOrdn = charIDToTypeID( "Ordn" );        var idTrgt = charIDToTypeID( "Trgt" );        ref32.putEnumerated( idPath, idOrdn, idTrgt );    desc83.putReference( idUsng, ref32 );executeAction( idMk, desc83, DialogModes.NO );}  function selectVectorMask(layerName){        addProgress(1);     // =======================================================    var idsetd = charIDToTypeID( "setd" );        var desc = new ActionDescriptor();        var idnull = charIDToTypeID( "null" );            var ref = new ActionReference();            var idChnl = charIDToTypeID( "Chnl" );            var idfsel = charIDToTypeID( "fsel" );            ref.putProperty( idChnl, idfsel );        desc.putReference( idnull, ref );        var idT = charIDToTypeID( "T   " );            var ref = new ActionReference();            var idPath = charIDToTypeID( "Path" );            var idPath = charIDToTypeID( "Path" );            var idvectorMask = stringIDToTypeID( "vectorMask" );            ref.putEnumerated( idPath, idPath, idvectorMask );            var idLyr = charIDToTypeID( "Lyr " );            ref.putName( idLyr, layerName);        desc.putReference( idT, ref );        var idVrsn = charIDToTypeID( "Vrsn" );        desc.putInteger( idVrsn, 1 );        var idvectorMaskParams = stringIDToTypeID( "vectorMaskParams" );        desc.putBoolean( idvectorMaskParams, true );                try{            executeAction( idsetd, desc, DialogModes.NO );            }        catch(e)        {            alert('no selection');            };        }function centreAllLayers(targetItem){        var doc = app.activeDocument;    var j = doc.artLayers.length-1;                    for(var i=0;j> i; i++){                var currentItem = doc.artLayers[i].name;        if(currentItem != targetItem) {            moveToSelection(currentItem,'horizontal');            moveToSelection(currentItem,'vertical');            addProgress(1);             }        } }function moveToSelection(layername,iPos){        addProgress(1);         var doc =  app.activeDocument;if(layerByName !="") {    var layerByName = doc.artLayers.getByName(layername)    doc.activeLayer = layerByName;    }// =======================================================var idAlgn = charIDToTypeID( "Algn" );    var desc = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );        var ref = new ActionReference();        var idLyr = charIDToTypeID( "Lyr " );        var idOrdn = charIDToTypeID( "Ordn" );        var idTrgt = charIDToTypeID( "Trgt" );        ref.putEnumerated( idLyr, idOrdn, idTrgt );    desc.putReference( idnull, ref );    var idUsng = charIDToTypeID( "Usng" );    var idADSt = charIDToTypeID( "ADSt" );              switch(iPos)      {                case 'left':                var setPos = charIDToTypeID( "AdLf" );                break;                case 'right':                var setPos = charIDToTypeID( "AdRg" );                break;                case 'top':                var setPos = charIDToTypeID( "AdTp" );                break;                case 'bottom':                var setPos = charIDToTypeID( "AdBt" );                break;                case 'horizontal':                var setPos = charIDToTypeID( "AdCV" );                break;                case 'vertical':                var setPos = charIDToTypeID( "AdCH" );                break;                                default:          }            try{        desc.putEnumerated( idUsng, idADSt, setPos );        }    catch(e){        alert('no object');        }                try{            executeAction( idAlgn, desc, DialogModes.NO );            }        catch(e)        {            alert('no selection');            };}                }            }